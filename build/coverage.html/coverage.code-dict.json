{"/home/travis/build/npmtest/node-npmtest-karma-mocha-reporter/test.js":"/* istanbul instrument in package npmtest_karma_mocha_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha-reporter/lib.npmtest_karma_mocha_reporter.js":"/* istanbul instrument in package npmtest_karma_mocha_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_mocha_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_mocha_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-mocha-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_mocha_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_mocha_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_mocha_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_karma_mocha_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_mocha_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_karma_mocha_reporter.__dirname +\n                    '/lib.npmtest_karma_mocha_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-mocha-reporter/node_modules/karma-mocha-reporter/index.js":"'use strict';\r\n\r\nvar chalk = require('chalk');\r\nvar symbols = require('./symbols');\r\n\r\n/**\r\n * The MochaReporter.\r\n *\r\n * @param {!object} baseReporterDecorator The karma base reporter.\r\n * @param {!Function} formatError The karma function to format an error.\r\n * @param {!object} config The karma config.\r\n * @constructor\r\n */\r\nvar MochaReporter = function (baseReporterDecorator, formatError, config) {\r\n    // extend the base reporter\r\n    baseReporterDecorator(this);\r\n\r\n    var self = this;\r\n    var firstRun = true;\r\n    var isRunCompleted = false;\r\n    var internalPrefix = '$%$';\r\n\r\n    /**\r\n     * Returns the text repeated n times.\r\n     *\r\n     * @param {!string} text The text.\r\n     * @param {!number} n The number of times the string should be repeated.\r\n     * @returns {string}\r\n     */\r\n    function repeatString(text, n) {\r\n        var res = [];\r\n        var i;\r\n\r\n        for (i = 0; i < n; i++) {\r\n            res.push(text);\r\n        }\r\n\r\n        return res.join('');\r\n    }\r\n\r\n    config.mochaReporter = config.mochaReporter || {};\r\n\r\n    var outputMode = config.mochaReporter.output || 'full';\r\n    var ignoreSkipped = config.mochaReporter.ignoreSkipped || false;\r\n    var divider = config.mochaReporter.hasOwnProperty('divider') ? config.mochaReporter.divider : '=';\r\n    divider = repeatString(divider || '', process.stdout.columns || 80);\r\n\r\n    // disable chalk when colors is set to false\r\n    chalk.enabled = config.colors !== false;\r\n\r\n    // set color functions\r\n    config.mochaReporter.colors = config.mochaReporter.colors || {};\r\n\r\n    // set symbol functions\r\n    config.mochaReporter.symbols = config.mochaReporter.symbols || {};\r\n\r\n    // set diff output\r\n    config.mochaReporter.showDiff = config.mochaReporter.showDiff || false;\r\n\r\n    // print first successful result\r\n    config.mochaReporter.printFirstSuccess = config.mochaReporter.printFirstSuccess || false;\r\n\r\n    var colors = {\r\n        success: {\r\n            symbol: config.mochaReporter.symbols.success || symbols.success,\r\n            print: chalk[config.mochaReporter.colors.success] || chalk.green\r\n        },\r\n        info: {\r\n            symbol: config.mochaReporter.symbols.info || symbols.info,\r\n            print: chalk[config.mochaReporter.colors.info] || chalk.grey\r\n        },\r\n        warning: {\r\n            symbol: config.mochaReporter.symbols.warning || symbols.warning,\r\n            print: chalk[config.mochaReporter.colors.warning] || chalk.yellow\r\n        },\r\n        error: {\r\n            symbol: config.mochaReporter.symbols.error || symbols.error,\r\n            print: chalk[config.mochaReporter.colors.error] || chalk.red\r\n        }\r\n    };\r\n\r\n    // init max number of log lines\r\n    config.mochaReporter.maxLogLines = config.mochaReporter.maxLogLines || 999;\r\n\r\n    if (isNaN(config.mochaReporter.maxLogLines)) {\r\n        self.write(colors.warning.print('Option \"config.mochaReporter.maxLogLines\" must be of type number. Default value 999 is used!'));\r\n        config.mochaReporter.maxLogLines = 999;\r\n    }\r\n\r\n    // check if mocha is installed when showDiff is enabled\r\n    if (config.mochaReporter.showDiff) {\r\n        try {\r\n            var mocha = require('mocha');\r\n            var diff = require('diff');\r\n        } catch (e) {\r\n            self.write(colors.error.print('Error loading module mocha!\\nYou have enabled diff output. That only works with karma-mocha and mocha installed!\\nRun the following command in your command line:\\n  npm install karma-mocha mocha diff\\n'));\r\n            return;\r\n        }\r\n    }\r\n\r\n    function getLogSymbol(color) {\r\n        return chalk.enabled ? color.print(color.symbol) : chalk.stripColor(color.symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns a unified diff between two strings.\r\n     *\r\n     * @param {Error} err with actual/expected\r\n     * @return {string} The diff.\r\n     */\r\n    function unifiedDiff(err) {\r\n        var indent = '      ';\r\n\r\n        function cleanUp(line) {\r\n            if (line[0] === '+') {\r\n                return indent + colors.success.print(line);\r\n            }\r\n            if (line[0] === '-') {\r\n                return indent + colors.error.print(line);\r\n            }\r\n            if (line.match(/\\@\\@/)) {\r\n                return null;\r\n            }\r\n            if (line.match(/\\\\ No newline/)) {\r\n                return null;\r\n            }\r\n            return indent + line;\r\n        }\r\n\r\n        function notBlank(line) {\r\n            return line !== null;\r\n        }\r\n\r\n        var msg = diff.createPatch('string', err.actual, err.expected);\r\n        var lines = msg.split('\\n').splice(4);\r\n        return '\\n      ' +\r\n            colors.success.print('+ expected') + ' ' +\r\n            colors.error.print('- actual') +\r\n            '\\n\\n' +\r\n            lines.map(cleanUp).filter(notBlank).join('\\n');\r\n    }\r\n\r\n    /**\r\n     * Return a character diff for `err`.\r\n     *\r\n     * @param {Error} err\r\n     * @param {string} type\r\n     * @return {string}\r\n     */\r\n    function errorDiff(err, type) {\r\n        var actual = err.actual;\r\n        var expected = err.expected;\r\n        return diff['diff' + type](actual, expected).map(function (str) {\r\n            if (str.added) {\r\n                return colors.success.print(str.value);\r\n            }\r\n            if (str.removed) {\r\n                return colors.error.print(str.value);\r\n            }\r\n            return str.value;\r\n        }).join('');\r\n    }\r\n\r\n    /**\r\n     * Pad the given `str` to `len`.\r\n     *\r\n     * @param {string} str\r\n     * @param {string} len\r\n     * @return {string}\r\n     */\r\n    function pad(str, len) {\r\n        str = String(str);\r\n        return Array(len - str.length + 1).join(' ') + str;\r\n    }\r\n\r\n    /**\r\n     * Returns an inline diff between 2 strings with coloured ANSI output\r\n     *\r\n     * @param {Error} err with actual/expected\r\n     * @return {string} Diff\r\n     */\r\n    function inlineDiff(err) {\r\n        var msg = errorDiff(err, 'WordsWithSpace');\r\n\r\n        // linenos\r\n        var lines = msg.split('\\n');\r\n        if (lines.length > 4) {\r\n            var width = String(lines.length).length;\r\n            msg = lines.map(function (str, i) {\r\n                return pad(++i, width) + ' |' + ' ' + str;\r\n            }).join('\\n');\r\n        }\r\n\r\n        // legend\r\n        msg = '\\n' +\r\n            colors.success.print('expected') +\r\n            ' ' +\r\n            colors.error.print('actual') +\r\n            '\\n\\n' +\r\n            msg +\r\n            '\\n';\r\n\r\n        // indent\r\n        msg = msg.replace(/^/gm, '      ');\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted time interval\r\n     *\r\n     * @param {!number} time The time.\r\n     * @returns {string}\r\n     */\r\n    function formatTimeInterval(time) {\r\n        var mins = Math.floor(time / 60000);\r\n        var secs = (time - mins * 60000) / 1000;\r\n        var str = secs + (secs === 1 ? ' sec' : ' secs');\r\n\r\n        if (mins) {\r\n            str = mins + (mins === 1 ? ' min ' : ' mins ') + str;\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Checks if all items are completed\r\n     *\r\n     * @param {object} items The item objects\r\n     * @returns {boolean}\r\n     */\r\n    function allChildItemsAreCompleted(items) {\r\n        var item;\r\n        var isCompleted = true;\r\n\r\n        Object.keys(items).forEach(function (key) {\r\n            item = items[key];\r\n\r\n            if (item.type === 'it') {\r\n                isCompleted = isCompleted && item.isCompleted;\r\n            } else if (item.items) {\r\n                // recursive check of child items\r\n                isCompleted = isCompleted && allChildItemsAreCompleted(item.items);\r\n            }\r\n        });\r\n\r\n        return isCompleted;\r\n    }\r\n\r\n    /**\r\n     * Prints a single item\r\n     *\r\n     * @param {!object} item The item to print\r\n     * @param {number} depth The depth\r\n     */\r\n    function printItem(item, depth) {\r\n        // only print to output once\r\n        if (item.name && !item.printed && (!item.skipped || !ignoreSkipped)) {\r\n            // only print it block when it was ran through all browsers\r\n            if (item.type === 'it' && !item.isCompleted) {\r\n                return;\r\n            }\r\n\r\n            // indent\r\n            var line = repeatString('  ', depth) + item.name.replace(internalPrefix, '');\r\n\r\n            // it block\r\n            if (item.type === 'it') {\r\n                if (item.skipped) {\r\n                    // print skipped tests info\r\n                    line = colors.info.print(chalk.stripColor(line) + ' (skipped)');\r\n                } else {\r\n                    // set color to success or error\r\n                    line = item.success ? colors.success.print(line) : colors.error.print(line);\r\n                }\r\n            } else {\r\n                // print name of a suite block in bold\r\n                line = chalk.bold(line);\r\n            }\r\n\r\n            // use write method of baseReporter\r\n            self.write(line + '\\n');\r\n\r\n            // set item as printed\r\n            item.printed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the test results to the output\r\n     *\r\n     * @param {!object} suite The test suite\r\n     * @param {number=} depth The indention.\r\n     */\r\n    function print(suite, depth) {\r\n        var keys = Object.keys(suite);\r\n        var length = keys.length;\r\n        var i, item;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            item = suite[keys[i]];\r\n\r\n            // start of a new suite\r\n            if (item.isRoot) {\r\n                depth = 1;\r\n            }\r\n\r\n            if (item.items) {\r\n                var allChildItemsCompleted = allChildItemsAreCompleted(item.items);\r\n\r\n                if (allChildItemsCompleted) {\r\n                    // print current item because all children are completed\r\n                    printItem(item, depth);\r\n\r\n                    // print all child items\r\n                    print(item.items, depth + 1);\r\n                }\r\n            } else {\r\n                // print current item which has no children\r\n                printItem(item, depth);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the failed test to the output\r\n     *\r\n     * @param {!object} suite The test suite\r\n     * @param {number=} depth The indention.\r\n     */\r\n    function printFailures(suite, depth) {\r\n        var keys = Object.keys(suite);\r\n        var length = keys.length;\r\n        var i, item;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            item = suite[keys[i]];\r\n\r\n            // start of a new suite\r\n            if (item.isRoot) {\r\n                depth = 1;\r\n            }\r\n\r\n            // only print to output when test failed\r\n            if (item.name && !item.success && !item.skipped) {\r\n                // indent\r\n                var line = repeatString('  ', depth) + item.name.replace(internalPrefix, '');\r\n\r\n                // it block\r\n                if (item.type === 'it') {\r\n                    // make item name error\r\n                    line = colors.error.print(line) + '\\n';\r\n\r\n                    // add all browser in which the test failed with color warning\r\n                    for (var bi = 0; bi < item.failed.length; bi++) {\r\n                        var browserName = item.failed[bi];\r\n                        line += repeatString('  ', depth + 1) + chalk.italic(colors.warning.print(browserName)) + '\\n';\r\n                    }\r\n\r\n                    // add the error log in error color\r\n                    item.log = item.log || [];\r\n                    var log = item.log.length ? item.log[0].split('\\n') : [];\r\n                    var linesToLog = config.mochaReporter.maxLogLines;\r\n                    var ii = 0;\r\n\r\n                    // set number of lines to output\r\n                    if (log.length < linesToLog) {\r\n                        linesToLog = log.length;\r\n                    }\r\n\r\n                    // print diff\r\n                    if (config.mochaReporter.showDiff && item.assertionErrors && item.assertionErrors[0]) {\r\n                        var errorMessage = log.splice(0, 1)[0];\r\n\r\n                        // print error message before diff\r\n                        line += colors.error.print(repeatString('  ', depth) + errorMessage + '\\n');\r\n\r\n                        var expected = item.assertionErrors[0].expected;\r\n                        var actual = item.assertionErrors[0].actual;\r\n                        var utils = mocha.utils;\r\n                        var err = {\r\n                            actual: actual,\r\n                            expected: expected\r\n                        };\r\n\r\n                        if (String(err.actual).match(/^\".*\"$/) && String(err.expected).match(/^\".*\"$/)) {\r\n                            try {\r\n                                err.actual = JSON.parse(err.actual);\r\n                                err.expected = JSON.parse(err.expected);\r\n                            } catch (e) { }\r\n                        }\r\n\r\n                        // ensure that actual and expected are strings\r\n                        if (!(utils.isString(actual) && utils.isString(expected))) {\r\n                            err.actual = utils.stringify(actual);\r\n                            err.expected = utils.stringify(expected);\r\n                        }\r\n\r\n                        // create diff\r\n                        var diff = config.mochaReporter.showDiff === 'inline' ? inlineDiff(err) : unifiedDiff(err);\r\n\r\n                        line += diff + '\\n';\r\n\r\n                        // print formatted stack trace after diff\r\n                        for (ii; ii < linesToLog; ii++) {\r\n                            line += colors.error.print(formatError(log[ii]));\r\n                        }\r\n                    } else {\r\n                        for (ii; ii < linesToLog; ii++) {\r\n                            line += colors.error.print(formatError(log[ii], repeatString('  ', depth)));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // use write method of baseReporter\r\n                self.write(line + '\\n');\r\n            }\r\n\r\n            if (item.items) {\r\n                // print all child items\r\n                printFailures(item.items, depth + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a singularized or plularized noun for \"test\" based on test count\r\n     *\r\n     * @param {!Number} testCount\r\n     * @returns {String}\r\n     */\r\n    function getTestNounFor(testCount) {\r\n        if (testCount === 1) {\r\n            return 'test';\r\n        }\r\n        return 'tests';\r\n    }\r\n\r\n    /**\r\n     * Called each time a test is completed in a given browser.\r\n     *\r\n     * @param {!object} browser The current browser.\r\n     * @param {!object} result The result of the test.\r\n     */\r\n    function specComplete(browser, result) {\r\n        // complete path of the test\r\n        var path = [].concat(result.suite, result.description);\r\n        var maxDepth = path.length - 1;\r\n\r\n        path.reduce(function (suite, description, depth) {\r\n            // add prefix to description to prevent errors when the description is a reserved name (e.g. 'toString' or 'hasOwnProperty')\r\n            description = internalPrefix + description;\r\n\r\n            var item;\r\n\r\n            if (suite.hasOwnProperty(description) && suite[description].type === 'it' && self.numberOfBrowsers === 1) {\r\n                item = {};\r\n                description += ' ';\r\n            } else {\r\n                item = suite[description] || {};\r\n            }\r\n\r\n            suite[description] = item;\r\n\r\n            item.name = description;\r\n            item.isRoot = depth === 0;\r\n            item.type = 'describe';\r\n            item.skipped = result.skipped;\r\n            item.success = (item.success === undefined ? true : item.success) && result.success;\r\n\r\n            // set item success to true when item is skipped\r\n            if (item.skipped) {\r\n                item.success = true;\r\n            }\r\n\r\n            // it block\r\n            if (depth === maxDepth) {\r\n                item.type = 'it';\r\n                item.count = item.count || 0;\r\n                item.count++;\r\n                item.failed = item.failed || [];\r\n                item.success = result.success && item.success;\r\n                item.name = (item.success ? getLogSymbol(colors.success) : getLogSymbol(colors.error)) + ' ' + item.name;\r\n                item.skipped = result.skipped;\r\n                item.visited = item.visited || [];\r\n                item.visited.push(browser.name);\r\n                self.netTime += result.time;\r\n\r\n                if (result.skipped) {\r\n                    self.numberOfSkippedTests++;\r\n                }\r\n\r\n                if (result.success === false) {\r\n                    // add browser to failed browsers array\r\n                    item.failed.push(browser.name);\r\n\r\n                    // add error log\r\n                    item.log = result.log;\r\n\r\n                    // add assertion errors if available (currently in karma-mocha)\r\n                    item.assertionErrors = result.assertionErrors;\r\n                }\r\n\r\n                if (config.reportSlowerThan && result.time > config.reportSlowerThan) {\r\n                    // add slow report warning\r\n                    item.name += colors.warning.print((' (slow: ' + formatTimeInterval(result.time) + ')'));\r\n                    self.numberOfSlowTests++;\r\n                }\r\n\r\n                if (item.count === self.numberOfBrowsers || config.mochaReporter.printFirstSuccess) {\r\n                    item.isCompleted = true;\r\n\r\n                    // print results to output when test was ran through all browsers\r\n                    if (outputMode !== 'minimal') {\r\n                        print(self.allResults, depth);\r\n                    }\r\n                }\r\n            } else {\r\n                item.items = item.items || {};\r\n            }\r\n\r\n            return item.items;\r\n        }, self.allResults);\r\n    }\r\n\r\n    self.specSuccess = specComplete;\r\n    self.specSkipped = specComplete;\r\n    self.specFailure = specComplete;\r\n\r\n    self.onSpecComplete = function (browser, result) {\r\n        specComplete(browser, result);\r\n    };\r\n\r\n    self.onRunStart = function () {\r\n        if (!firstRun && divider) {\r\n            self.write('\\n' + chalk.bold(divider) + '\\n');\r\n        }\r\n        firstRun = false;\r\n        isRunCompleted = false;\r\n\r\n        self.write('\\n' + chalk.underline.bold('START:') + '\\n');\r\n        self._browsers = [];\r\n        self.allResults = {};\r\n        self.totalTime = 0;\r\n        self.netTime = 0;\r\n        self.numberOfSlowTests = 0;\r\n        self.numberOfSkippedTests = 0;\r\n        self.numberOfBrowsers = (config.browsers || []).length || 1;\r\n    };\r\n\r\n    self.onBrowserStart = function (browser) {\r\n        self._browsers.push(browser);\r\n    };\r\n\r\n    self.onRunComplete = function (browsers, results) {\r\n        browsers.forEach(function (browser) {\r\n            self.totalTime += browser.lastResult.totalTime;\r\n        });\r\n\r\n        // print extra error message for some special cases, e.g. when having the error \"Some of your tests did a full page reload!\" the onRunComplete() method is called twice\r\n        if (results.error && isRunCompleted) {\r\n            self.write('\\n');\r\n            self.write(getLogSymbol(colors.error) + colors.error.print(' Error while running the tests! Exit code: ' + results.exitCode));\r\n            self.write('\\n\\n');\r\n            return;\r\n        }\r\n\r\n        isRunCompleted = true;\r\n\r\n        self.write('\\n' + colors.success.print('Finished in ' + formatTimeInterval(self.totalTime) + ' / ' +\r\n            formatTimeInterval(self.netTime) + ' @ ' + new Date().toTimeString()));\r\n        self.write('\\n\\n');\r\n\r\n        if (browsers.length > 0 && !results.disconnected) {\r\n            self.write(chalk.underline.bold('SUMMARY:') + '\\n');\r\n            self.write(colors.success.print(getLogSymbol(colors.success) + ' ' + results.success + ' ' + getTestNounFor(results.success) + ' completed'));\r\n            self.write('\\n');\r\n\r\n            if (self.numberOfSkippedTests > 0) {\r\n                self.write(colors.info.print(getLogSymbol(colors.info) + ' ' + self.numberOfSkippedTests + ' ' + getTestNounFor(self.numberOfSkippedTests) + ' skipped'));\r\n                self.write('\\n');\r\n            }\r\n\r\n            if (self.numberOfSlowTests > 0) {\r\n                self.write(colors.warning.print(getLogSymbol(colors.warning) + ' ' + self.numberOfSlowTests + ' ' + getTestNounFor(self.numberOfSlowTests) + ' slow'));\r\n                self.write('\\n');\r\n            }\r\n\r\n            if (results.failed) {\r\n                self.write(colors.error.print(getLogSymbol(colors.error) + ' ' + results.failed + ' ' + getTestNounFor(results.failed) + ' failed'));\r\n                self.write('\\n');\r\n\r\n                if (outputMode !== 'noFailures') {\r\n                    self.write('\\n' + chalk.underline.bold('FAILED TESTS:') + '\\n');\r\n                    printFailures(self.allResults);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (outputMode === 'autowatch') {\r\n            outputMode = 'minimal';\r\n        }\r\n    };\r\n};\r\n\r\n// inject karma runner baseReporter and config\r\nMochaReporter.$inject = ['baseReporterDecorator', 'formatError', 'config'];\r\n\r\n// PUBLISH DI MODULE\r\nmodule.exports = {\r\n    'reporter:mocha': ['type', MochaReporter]\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-karma-mocha-reporter/node_modules/karma-mocha-reporter/symbols.js":"// used symbols from here: https://github.com/sindresorhus/log-symbols\r\n'use strict';\r\n\r\nvar main = {\r\n    info: 'ℹ',\r\n    success: '✔',\r\n    warning: '⚠',\r\n    error: '✖'\r\n};\r\n\r\nvar win = {\r\n    info: 'i',\r\n    success: '√',\r\n    warning: '‼',\r\n    error: '×'\r\n};\r\n\r\nmodule.exports = process.platform === 'win32' ? win : main;"}